name: Deploy to AKS (Helm)

on:
  push:
    branches: ["**"]
  workflow_dispatch:

jobs:
  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      RG: ${{ vars.AZURE_RESOURCE_GROUP }}
      AKS: ${{ vars.AZURE_AKS_CLUSTER }}
      ACR_NAME: ${{ vars.AZURE_ACR_NAME }}
    steps:
      - uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Set kubectl context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ env.RG }}
          cluster-name: ${{ env.AKS }}

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: Get ACR server
        id: acr
        run: echo "SERVER=$(az acr show -n $ACR_NAME --query loginServer -o tsv)" >> $GITHUB_OUTPUT

      - name: Prepare namespace name
        id: ns
        run: |
          NS=$(echo "${GITHUB_REF_NAME}" | tr '/._' '-' | tr '[:upper:]' '[:lower:]')
          echo "NS=$NS" >> $GITHUB_OUTPUT

      - name: Create namespace if missing
        run: kubectl create ns ${{ steps.ns.outputs.NS }} --dry-run=client -o yaml | kubectl apply -f -

      - name: Helm upgrade/install
        run: |
          IMAGE="${{ steps.acr.outputs.SERVER }}/pyapp:${{ github.sha }}"
          helm upgrade --install pyapp \
            ./helm/pyapp \
            -n ${{ steps.ns.outputs.NS }} \
            --set image.repository=${{ steps.acr.outputs.SERVER }}/pyapp \
            --set image.tag=${{ github.sha }} \
            --set env.APP_ENV=${{ steps.ns.outputs.NS }}


