name: Build & Deploy (vCluster per branch)

on:
  push:
    branches: ["**"]
  pull_request:
  workflow_dispatch:

env:
  ACR_NAME: ${{ vars.AZURE_ACR_NAME }}
  RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }}
  AKS_CLUSTER: ${{ vars.AZURE_AKS_CLUSTER }}
  BASE_DOMAIN: ${{ vars.BASE_DOMAIN }}

jobs:
  build:
    name: 🏗️ Build & Push to ACR
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Login to Azure using SP secret (avoids OIDC subject issues)
      - name: Azure Login (client secret)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get ACR login server
        id: acr
        run: echo "SERVER=$(az acr show -n $ACR_NAME --query loginServer -o tsv)" >> $GITHUB_OUTPUT

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: ACR Docker Login via refresh token
        run: |
          SERVER=$(az acr show -n $ACR_NAME --query loginServer -o tsv)
          TOKEN=$(az acr login -n $ACR_NAME --expose-token --query accessToken -o tsv)
          echo "$TOKEN" | docker login "$SERVER" -u 00000000-0000-0000-0000-000000000000 --password-stdin

      - name: Build & Push Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.acr.outputs.SERVER }}/pyapp:${{ github.sha }}
            ${{ steps.acr.outputs.SERVER }}/pyapp:${{ github.ref_name }}
            ${{ steps.acr.outputs.SERVER }}/pyapp:latest

  deploy:
    name: 🚀 Create/Connect vCluster & Deploy Helm
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (client secret)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.AKS_CLUSTER }}

      - name: Install vcluster CLI
        run: |
          curl -sSL -o vcluster "https://github.com/loft-sh/vcluster/releases/latest/download/vcluster-linux-amd64"
          chmod +x vcluster
          sudo mv vcluster /usr/local/bin/vcluster
          vcluster --version

      - name: Compute branch identifiers
        id: br
        run: |
          NS=$(echo "${GITHUB_REF_NAME}" | tr '/._' '-' | tr '[:upper:]' '[:lower:]')
          VC_NAME="vc-${NS}"
          echo "NS=$NS" >> $GITHUB_OUTPUT
          echo "VC_NAME=$VC_NAME" >> $GITHUB_OUTPUT
          echo "HOST=${NS}.${{ env.BASE_DOMAIN }}" >> $GITHUB_OUTPUT

      - name: Ensure namespace exists (host cluster)
        run: |
          kubectl create ns ${{ steps.br.outputs.NS }} --dry-run=client -o yaml | kubectl apply -f -

      # Create vcluster if missing; enable ingress syncing so Ingress in vcluster appears in host namespace
      - name: Create vcluster if needed
        run: |
          set -e
          if ! vcluster list -n ${{ steps.br.outputs.NS }} | awk '{print $1}' | grep -qx "${{ steps.br.outputs.VC_NAME }}"; then
            vcluster create ${{ steps.br.outputs.VC_NAME }} -n ${{ steps.br.outputs.NS }} \
              --connect=false \
              --expose \
              --sync-ingresses=true
          else
            echo "vcluster ${{ steps.br.outputs.VC_NAME }} already exists"
          fi

      # Get kubeconfig for the vcluster (without altering current context)
      - name: Get vcluster kubeconfig
        run: |
          vcluster connect ${{ steps.br.outputs.VC_NAME }} -n ${{ steps.br.outputs.NS }} \
            --update-current=false --print > kubeconfig-${{ steps.br.outputs.VC_NAME }}.yaml
          echo "KUBECONFIG=$PWD/kubeconfig-${{ steps.br.outputs.VC_NAME }}.yaml" >> $GITHUB_ENV

      - name: Verify vcluster API
        run: |
          kubectl --kubeconfig "$KUBECONFIG" get ns
          kubectl --kubeconfig "$KUBECONFIG" get nodes || true

      - name: Install Helm
        uses: azure/setup-helm@v4

      - name: ACR server (again)
        id: acr
        run: echo "SERVER=$(az acr show -n ${{ env.ACR_NAME }} --query loginServer -o tsv)" >> $GITHUB_OUTPUT

      # Deploy the app *inside* the vcluster
      - name: Helm upgrade/install into vcluster
        run: |
          IMAGE="${{ steps.acr.outputs.SERVER }}/pyapp:${{ github.sha }}"
          HOST="${{ steps.br.outputs.HOST }}"

          # Namespace inside vcluster for the app (can be default or "pyapp")
          APP_NS="default"
          kubectl --kubeconfig "$KUBECONFIG" create ns $APP_NS --dry-run=client -o yaml | kubectl --kubeconfig "$KUBECONFIG" apply -f -

          helm upgrade --install pyapp ./helm/pyapp \
            --kubeconfig "$KUBECONFIG" \
            -n $APP_NS \
            --set image.repository=${{ steps.acr.outputs.SERVER }}/pyapp \
            --set image.tag=${{ github.sha }} \
            --set env.APP_ENV=${{ steps.br.outputs.NS }} \
            --set ingress.enabled=true \
            --set ingress.className=nginx \
            --set ingress.host=${HOST} \
            --set ingress.tlsEnabled=false

      - name: Show app status (vcluster)
        run: |
          kubectl --kubeconfig "$KUBECONFIG" -n default get deploy,svc,ing
